
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800100  00800100  00000270  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000662  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000151  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d8  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000238  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e3  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec ef       	ldi	r30, 0xFC	; 252
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a7 30       	cpi	r26, 0x07	; 7
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  b2:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <zeigeBereitschaft>:
}


void zeigeBereitschaft() {
	//Interrupts deaktivieren
	cli();
  ba:	f8 94       	cli
	TCNT0 = 0x00; //Timer zurücksetzen
  bc:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (1<<CS02) | (1<<CS00) ;	//Prescaler auf 1024;~32ms bis Interrupt;
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);  //Overflow Interrupt aktivieren
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 6e 00 	sts	0x006E, r24
	sei();
  c8:	78 94       	sei
	
}
  ca:	08 95       	ret

000000cc <startWaitingTimer>:

void startWaitingTimer() {
	cli();
  cc:	f8 94       	cli
	TCCR1A = 0x00;
  ce:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1<<WGM12);//OCR1A
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	80 83       	st	Z, r24
	TCNT1 = (uint16_t) (0x0000);
  da:	10 92 85 00 	sts	0x0085, r1
  de:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 39063;//(8000000 / 1024)*5   genau 5 Sekunden
  e2:	87 e9       	ldi	r24, 0x97	; 151
  e4:	98 e9       	ldi	r25, 0x98	; 152
  e6:	90 93 89 00 	sts	0x0089, r25
  ea:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = (1<<CS02) | (1<<CS00);	//Prescaler auf 1024
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	80 83       	st	Z, r24
	TIMSK1 = (1<<OCIE1A);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	80 93 6f 00 	sts	0x006F, r24
	//Interrupts aktivieren
	sei();
  f8:	78 94       	sei
	
}
  fa:	08 95       	ret

000000fc <startLEDBereitschaft>:

void startLEDBereitschaft() {
	cli();
  fc:	f8 94       	cli
	TCNT0 = 0x00; //Timer zurücksetzen
  fe:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (1<<CS02) | (1<<CS00) ;	//Prescaler auf 1024;~32ms bis Interrupt;
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);  //Overflow Interrupt aktivieren
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 6e 00 	sts	0x006E, r24
	sei();
 10a:	78 94       	sei
}
 10c:	08 95       	ret

0000010e <stopWaitingTimer>:

void stopWaitingTimer() {
	
}
 10e:	08 95       	ret

00000110 <__vector_18>:

//Timer für die Anzeige der LEDs
ISR(TIMER0_OVF_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	if (aktiverMode==bereitschaft) {	//Wenn im bereitschaftsmodus, dann alle ~100 ms die LED wechseln
 11c:	80 91 06 01 	lds	r24, 0x0106
 120:	88 23       	and	r24, r24
 122:	d9 f5       	brne	.+118    	; 0x19a <__vector_18+0x8a>
		if (intervalCounter==3) {
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	b9 f5       	brne	.+110    	; 0x19a <__vector_18+0x8a>
			intervalCounter = 0;
 12c:	10 92 00 01 	sts	0x0100, r1
			switch (readyTurn) {
 130:	80 91 05 01 	lds	r24, 0x0105
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	91 f0       	breq	.+36     	; 0x15c <__vector_18+0x4c>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	28 f0       	brcs	.+10     	; 0x146 <__vector_18+0x36>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	c9 f0       	breq	.+50     	; 0x172 <__vector_18+0x62>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	59 f5       	brne	.+86     	; 0x19a <__vector_18+0x8a>
 144:	21 c0       	rjmp	.+66     	; 0x188 <__vector_18+0x78>
				case left:
					readyTurn = up;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 05 01 	sts	0x0105, r24
uint8_t ledOben = (1<<PORTB5);
uint8_t ledUnten = (1<<PORTB7);
*/

inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
 14c:	16 9a       	sbi	0x02, 6	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 14e:	88 b1       	in	r24, 0x08	; 8
 150:	88 b9       	out	0x08, r24	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 152:	85 b1       	in	r24, 0x05	; 5
 154:	85 b9       	out	0x05, r24	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 156:	85 b1       	in	r24, 0x05	; 5
 158:	85 b9       	out	0x05, r24	; 5
 15a:	1f c0       	rjmp	.+62     	; 0x19a <__vector_18+0x8a>
				case left:
					readyTurn = up;
					LEDLeftOnly();
				break;
				case up:
					readyTurn = right;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	80 93 05 01 	sts	0x0105, r24
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 162:	82 b1       	in	r24, 0x02	; 2
 164:	82 b9       	out	0x02, r24	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 166:	88 b1       	in	r24, 0x08	; 8
 168:	88 b9       	out	0x08, r24	; 8
}

inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
 16a:	2d 9a       	sbi	0x05, 5	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	85 b9       	out	0x05, r24	; 5
 170:	14 c0       	rjmp	.+40     	; 0x19a <__vector_18+0x8a>
				case up:
					readyTurn = right;
					LEDObenOnly();
				break;
				case right:
					readyTurn = down;
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	80 93 05 01 	sts	0x0105, r24
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 178:	82 b1       	in	r24, 0x02	; 2
 17a:	82 b9       	out	0x02, r24	; 2
}

inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
 17c:	46 9a       	sbi	0x08, 6	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	85 b9       	out	0x05, r24	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 182:	85 b1       	in	r24, 0x05	; 5
 184:	85 b9       	out	0x05, r24	; 5
 186:	09 c0       	rjmp	.+18     	; 0x19a <__vector_18+0x8a>
				case right:
					readyTurn = down;
					LEDRechtsOnly();
				break;
				case down:
					readyTurn = left;
 188:	10 92 05 01 	sts	0x0105, r1
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 18c:	82 b1       	in	r24, 0x02	; 2
 18e:	82 b9       	out	0x02, r24	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 190:	88 b1       	in	r24, 0x08	; 8
 192:	88 b9       	out	0x08, r24	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 194:	85 b1       	in	r24, 0x05	; 5
 196:	85 b9       	out	0x05, r24	; 5
}

inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
 198:	2f 9a       	sbi	0x05, 7	; 5
					LEDUntenOnly();
				break;
			}//switch
		}//intervalCounter==3
	}//aktiverMode==bereitschaft
}
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_11>:
//Timer für Tastendrücke
ISR(TIMER2_OVF_vect) {
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
	
}
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_13>:

ISR (TIMER1_COMPA_vect) {
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
	PORTD = 0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	8b b9       	out	0x0b, r24	; 11
}
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_15>:

ISR(TIMER1_OVF_vect) {
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
	PORTD = 0x0F;
 1e2:	8f e0       	ldi	r24, 0x0F	; 15
 1e4:	8b b9       	out	0x0b, r24	; 11
}
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <main>:

int main(void)
{
	//initialize all variables
	zeigeBereitschaft();
 1f2:	0e 94 5d 00 	call	0xba	; 0xba <zeigeBereitschaft>
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <main+0x4>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
