
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000008a0  00000934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800106  00800106  0000093a  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  00001178  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102d  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c0  00000000  00000000  000022ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000852  00000000  00000000  0000266d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090b  00000000  00000000  000034af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00003dba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 ea       	ldi	r30, 0xA0	; 160
  90:	f8 e0       	ldi	r31, 0x08	; 8
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a6 e0       	ldi	r26, 0x06	; 6
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 31       	cpi	r26, 0x19	; 25
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  b2:	0c 94 4e 04 	jmp	0x89c	; 0x89c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <entprellen>:
uint8_t ledUnten = (1<<PORTB7);
*/

uint8_t entprellen(uint8_t Pin) {
	
}
  ba:	08 95       	ret

000000bc <startWaitingTimer>:
inline void zeigeKorrekt () {
	aktiverMode = korrektBlinken;
}

void startWaitingTimer() {
	cli();
  bc:	f8 94       	cli
	TCCR1A = 0x00;
  be:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = (1<<WGM12);//OCR1A
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	80 83       	st	Z, r24
	TCNT1 = (uint16_t) (0x0000);
  ca:	10 92 85 00 	sts	0x0085, r1
  ce:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 39063;//(8000000 / 1024)*5   genau 5 Sekunden
  d2:	87 e9       	ldi	r24, 0x97	; 151
  d4:	98 e9       	ldi	r25, 0x98	; 152
  d6:	90 93 89 00 	sts	0x0089, r25
  da:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = (1<<CS02) | (1<<CS00);	//Prescaler auf 1024
  de:	85 e0       	ldi	r24, 0x05	; 5
  e0:	80 83       	st	Z, r24
	TIMSK1 = (1<<OCIE1A);
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 6f 00 	sts	0x006F, r24
	//Interrupts aktivieren
	sei();
  e8:	78 94       	sei
	
}
  ea:	08 95       	ret

000000ec <startLEDBereitschaft>:

void startLEDBereitschaft() {
	cli();
  ec:	f8 94       	cli
	TCNT0 = 0x00; //Timer zurücksetzen
  ee:	16 bc       	out	0x26, r1	; 38
	TCCR0B = (1<<CS02) | (1<<CS00) ;	//Prescaler auf 1024;~32ms bis Interrupt;
  f0:	85 e0       	ldi	r24, 0x05	; 5
  f2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);  //Overflow Interrupt aktivieren
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 6e 00 	sts	0x006E, r24
	sei();
  fa:	78 94       	sei
}
  fc:	08 95       	ret

000000fe <stopWaitingTimer>:

void stopWaitingTimer() {
	TCCR1B = 0x00;
  fe:	10 92 81 00 	sts	0x0081, r1
}
 102:	08 95       	ret

00000104 <__vector_18>:

//Timer für die Anzeige der LEDs
ISR(TIMER0_OVF_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	
	if (aktiverMode==bereitschaft) {	//Wenn im bereitschaftsmodus, dann alle ~100 ms die LED wechseln
 116:	80 91 12 01 	lds	r24, 0x0112
 11a:	88 23       	and	r24, r24
 11c:	f1 f5       	brne	.+124    	; 0x19a <__vector_18+0x96>
		if (intervalCounter==3) {
 11e:	80 91 09 01 	lds	r24, 0x0109
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	09 f0       	breq	.+2      	; 0x128 <__vector_18+0x24>
 126:	bc c0       	rjmp	.+376    	; 0x2a0 <__vector_18+0x19c>
			intervalCounter = 0;
 128:	10 92 09 01 	sts	0x0109, r1
			switch (readyTurn) {
 12c:	80 91 11 01 	lds	r24, 0x0111
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	99 f0       	breq	.+38     	; 0x15a <__vector_18+0x56>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	30 f0       	brcs	.+12     	; 0x144 <__vector_18+0x40>
 138:	82 30       	cpi	r24, 0x02	; 2
 13a:	d1 f0       	breq	.+52     	; 0x170 <__vector_18+0x6c>
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	09 f0       	breq	.+2      	; 0x142 <__vector_18+0x3e>
 140:	af c0       	rjmp	.+350    	; 0x2a0 <__vector_18+0x19c>
 142:	21 c0       	rjmp	.+66     	; 0x186 <__vector_18+0x82>
				case left:
					readyTurn = up;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 11 01 	sts	0x0111, r24
uint8_t entprellen(uint8_t Pin) {
	
}

inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
 14a:	16 9a       	sbi	0x02, 6	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	88 b9       	out	0x08, r24	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	85 b9       	out	0x05, r24	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 154:	85 b1       	in	r24, 0x05	; 5
 156:	85 b9       	out	0x05, r24	; 5
 158:	a3 c0       	rjmp	.+326    	; 0x2a0 <__vector_18+0x19c>
				case left:
					readyTurn = up;
					LEDLeftOnly();
				break;
				case up:
					readyTurn = right;
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 11 01 	sts	0x0111, r24
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 160:	82 b1       	in	r24, 0x02	; 2
 162:	82 b9       	out	0x02, r24	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 164:	88 b1       	in	r24, 0x08	; 8
 166:	88 b9       	out	0x08, r24	; 8
}

inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
 168:	2d 9a       	sbi	0x05, 5	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	98 c0       	rjmp	.+304    	; 0x2a0 <__vector_18+0x19c>
				case up:
					readyTurn = right;
					LEDObenOnly();
				break;
				case right:
					readyTurn = down;
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	80 93 11 01 	sts	0x0111, r24
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 176:	82 b1       	in	r24, 0x02	; 2
 178:	82 b9       	out	0x02, r24	; 2
}

inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
 17a:	46 9a       	sbi	0x08, 6	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	85 b9       	out	0x05, r24	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	85 b9       	out	0x05, r24	; 5
 184:	8d c0       	rjmp	.+282    	; 0x2a0 <__vector_18+0x19c>
				case right:
					readyTurn = down;
					LEDRechtsOnly();
				break;
				case down:
					readyTurn = left;
 186:	10 92 11 01 	sts	0x0111, r1
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 18a:	82 b1       	in	r24, 0x02	; 2
 18c:	82 b9       	out	0x02, r24	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	88 b9       	out	0x08, r24	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	85 b9       	out	0x05, r24	; 5
}

inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
 196:	2f 9a       	sbi	0x05, 7	; 5
 198:	83 c0       	rjmp	.+262    	; 0x2a0 <__vector_18+0x19c>
					LEDUntenOnly();
				break;
			}//switch
		}//intervalCounter==3
	}//aktiverMode==bereitschaft
	else if (aktiverMode==folgeAbspielen) {
 19a:	80 91 12 01 	lds	r24, 0x0112
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <__vector_18+0xa0>
 1a2:	4b c0       	rjmp	.+150    	; 0x23a <__vector_18+0x136>
		if (intervalCounter==16) {//~500ms
 1a4:	80 91 09 01 	lds	r24, 0x0109
 1a8:	80 31       	cpi	r24, 0x10	; 16
 1aa:	09 f0       	breq	.+2      	; 0x1ae <__vector_18+0xaa>
 1ac:	79 c0       	rjmp	.+242    	; 0x2a0 <__vector_18+0x19c>
			intervalCounter=0;
 1ae:	10 92 09 01 	sts	0x0109, r1
			if (folgeCounter==folgenlaenge) {
 1b2:	80 91 06 01 	lds	r24, 0x0106
 1b6:	90 91 08 01 	lds	r25, 0x0108
 1ba:	98 17       	cp	r25, r24
 1bc:	29 f4       	brne	.+10     	; 0x1c8 <__vector_18+0xc4>
				aktiverMode = wartenAufSpieler;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 12 01 	sts	0x0112, r24
				folgeCounter = 0;
 1c4:	10 92 08 01 	sts	0x0108, r1
			}
			if (listLED[folgeCounter]==left) LEDLeftOnly();
 1c8:	80 91 08 01 	lds	r24, 0x0108
 1cc:	e0 91 13 01 	lds	r30, 0x0113
 1d0:	f0 91 14 01 	lds	r31, 0x0114
 1d4:	e8 0f       	add	r30, r24
 1d6:	f1 1d       	adc	r31, r1
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	41 f4       	brne	.+16     	; 0x1ee <__vector_18+0xea>
uint8_t entprellen(uint8_t Pin) {
	
}

inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
 1de:	16 9a       	sbi	0x02, 6	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 1e0:	88 b1       	in	r24, 0x08	; 8
 1e2:	88 b9       	out	0x08, r24	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	85 b9       	out	0x05, r24	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	85 b9       	out	0x05, r24	; 5
 1ec:	20 c0       	rjmp	.+64     	; 0x22e <__vector_18+0x12a>
			if (folgeCounter==folgenlaenge) {
				aktiverMode = wartenAufSpieler;
				folgeCounter = 0;
			}
			if (listLED[folgeCounter]==left) LEDLeftOnly();
			else if (listLED[folgeCounter]==up) LEDObenOnly();
 1ee:	80 81       	ld	r24, Z
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	41 f4       	brne	.+16     	; 0x204 <__vector_18+0x100>
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 1f4:	82 b1       	in	r24, 0x02	; 2
 1f6:	82 b9       	out	0x02, r24	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 1f8:	88 b1       	in	r24, 0x08	; 8
 1fa:	88 b9       	out	0x08, r24	; 8
}

inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
 1fc:	2d 9a       	sbi	0x05, 5	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	85 b9       	out	0x05, r24	; 5
 202:	15 c0       	rjmp	.+42     	; 0x22e <__vector_18+0x12a>
				aktiverMode = wartenAufSpieler;
				folgeCounter = 0;
			}
			if (listLED[folgeCounter]==left) LEDLeftOnly();
			else if (listLED[folgeCounter]==up) LEDObenOnly();
			else if (listLED[folgeCounter]==right) LEDRechtsOnly();
 204:	80 81       	ld	r24, Z
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	41 f4       	brne	.+16     	; 0x21a <__vector_18+0x116>
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 20a:	82 b1       	in	r24, 0x02	; 2
 20c:	82 b9       	out	0x02, r24	; 2
}

inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
 20e:	46 9a       	sbi	0x08, 6	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 210:	85 b1       	in	r24, 0x05	; 5
 212:	85 b9       	out	0x05, r24	; 5
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 214:	85 b1       	in	r24, 0x05	; 5
 216:	85 b9       	out	0x05, r24	; 5
 218:	0a c0       	rjmp	.+20     	; 0x22e <__vector_18+0x12a>
				folgeCounter = 0;
			}
			if (listLED[folgeCounter]==left) LEDLeftOnly();
			else if (listLED[folgeCounter]==up) LEDObenOnly();
			else if (listLED[folgeCounter]==right) LEDRechtsOnly();
			else if (listLED[folgeCounter]==down) LEDUntenOnly();
 21a:	80 81       	ld	r24, Z
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	39 f4       	brne	.+14     	; 0x22e <__vector_18+0x12a>
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 220:	82 b1       	in	r24, 0x02	; 2
 222:	82 b9       	out	0x02, r24	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 224:	88 b1       	in	r24, 0x08	; 8
 226:	88 b9       	out	0x08, r24	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 228:	85 b1       	in	r24, 0x05	; 5
 22a:	85 b9       	out	0x05, r24	; 5
}

inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
 22c:	2f 9a       	sbi	0x05, 7	; 5
			}
			if (listLED[folgeCounter]==left) LEDLeftOnly();
			else if (listLED[folgeCounter]==up) LEDObenOnly();
			else if (listLED[folgeCounter]==right) LEDRechtsOnly();
			else if (listLED[folgeCounter]==down) LEDUntenOnly();
			folgeCounter++;
 22e:	80 91 08 01 	lds	r24, 0x0108
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 08 01 	sts	0x0108, r24
 238:	33 c0       	rjmp	.+102    	; 0x2a0 <__vector_18+0x19c>
		}		
	} else if (aktiverMode==korrektBlinken) {
 23a:	80 91 12 01 	lds	r24, 0x0112
 23e:	83 30       	cpi	r24, 0x03	; 3
 240:	b9 f4       	brne	.+46     	; 0x270 <__vector_18+0x16c>
		if (intervalCounter==16) {
 242:	80 91 09 01 	lds	r24, 0x0109
 246:	80 31       	cpi	r24, 0x10	; 16
 248:	59 f5       	brne	.+86     	; 0x2a0 <__vector_18+0x19c>
			if (!flagShowResult) {
 24a:	80 91 07 01 	lds	r24, 0x0107
 24e:	88 23       	and	r24, r24
 250:	31 f4       	brne	.+12     	; 0x25e <__vector_18+0x15a>
				intervalCounter=0;
 252:	10 92 09 01 	sts	0x0109, r1
inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
}

inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
 256:	46 9a       	sbi	0x08, 6	; 8
inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
}

inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
 258:	2f 9a       	sbi	0x05, 7	; 5
uint8_t entprellen(uint8_t Pin) {
	
}

inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
 25a:	16 9a       	sbi	0x02, 6	; 2
 25c:	21 c0       	rjmp	.+66     	; 0x2a0 <__vector_18+0x19c>
				intervalCounter=0;
				LEDOnRechts();
				LEDOnUnten();
				LEDOnLinks();
			} else {
				intervalCounter = 0;
 25e:	10 92 09 01 	sts	0x0109, r1
inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 262:	82 b1       	in	r24, 0x02	; 2
 264:	82 b9       	out	0x02, r24	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 266:	88 b1       	in	r24, 0x08	; 8
 268:	88 b9       	out	0x08, r24	; 8
inline void LEDOnUnten() {
	PORTB |= (1<<PORTB7);
}

inline void LEDOffUnten() {
	PORTB |= (0<<PORTB7);
 26a:	85 b1       	in	r24, 0x05	; 5
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	18 c0       	rjmp	.+48     	; 0x2a0 <__vector_18+0x19c>
				LEDOffLinks();
				LEDOffRechts();
				LEDOffUnten();
			}
		}
	} else if (aktiverMode==falschBlinken) {
 270:	80 91 12 01 	lds	r24, 0x0112
 274:	84 30       	cpi	r24, 0x04	; 4
 276:	a1 f4       	brne	.+40     	; 0x2a0 <__vector_18+0x19c>
		if (intervalCounter==16) {
 278:	80 91 09 01 	lds	r24, 0x0109
 27c:	80 31       	cpi	r24, 0x10	; 16
 27e:	81 f4       	brne	.+32     	; 0x2a0 <__vector_18+0x19c>
			intervalCounter=0;
 280:	10 92 09 01 	sts	0x0109, r1
			if (!flagShowResult) {
 284:	80 91 07 01 	lds	r24, 0x0107
 288:	88 23       	and	r24, r24
 28a:	21 f4       	brne	.+8      	; 0x294 <__vector_18+0x190>
inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
}

inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
 28c:	46 9a       	sbi	0x08, 6	; 8
inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
}

inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
 28e:	2d 9a       	sbi	0x05, 5	; 5
uint8_t entprellen(uint8_t Pin) {
	
}

inline void LEDOnLinks() {
	PORTA |= (1<<PORTA6);
 290:	16 9a       	sbi	0x02, 6	; 2
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <__vector_18+0x19c>
}

inline void LEDOffLinks() {
	PORTA |= (0<<PORTA6);
 294:	82 b1       	in	r24, 0x02	; 2
 296:	82 b9       	out	0x02, r24	; 2
inline void LEDOnRechts(){
	 PORTC |= (1<<PORTC6);
}	 

inline void LEDOffRechts(){
	PORTC |= (0<<PORTC6);
 298:	88 b1       	in	r24, 0x08	; 8
 29a:	88 b9       	out	0x08, r24	; 8
inline void LEDOnOben() {
	PORTB |= (1<<PORTB5);
}

inline void LEDOffOben() {
	PORTB |= (0<<PORTB5);
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	85 b9       	out	0x05, r24	; 5
				LEDOffRechts();
				LEDOffOben();
			}
		}
	}
	intervalCounter++;
 2a0:	80 91 09 01 	lds	r24, 0x0109
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 09 01 	sts	0x0109, r24
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_11>:

//Timer für Tastendrücke und randomgenerator
ISR(TIMER2_OVF_vect) {
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	randZahl++;
 2de:	80 91 10 01 	lds	r24, 0x0110
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 10 01 	sts	0x0110, r24
	if (aktiverMode==bereitschaft) {	//auf Enter prüfen
 2e8:	80 91 12 01 	lds	r24, 0x0112
 2ec:	88 23       	and	r24, r24
 2ee:	39 f4       	brne	.+14     	; 0x2fe <__vector_11+0x42>
		enter = entprellen(TASTERENTER);
 2f0:	80 b1       	in	r24, 0x00	; 0
 2f2:	80 71       	andi	r24, 0x10	; 16
 2f4:	0e 94 5d 00 	call	0xba	; 0xba <entprellen>
 2f8:	80 93 0b 01 	sts	0x010B, r24
 2fc:	35 c0       	rjmp	.+106    	; 0x368 <__vector_11+0xac>
	} 
	else if ((aktiverMode==folgeAbspielen) || (aktiverMode==falschBlinken) || (aktiverMode==korrektBlinken)) {	//die zufallsreihenfolge oder das Ergebnis wird ausgegeben , nur cancel möglich
 2fe:	80 91 12 01 	lds	r24, 0x0112
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	41 f0       	breq	.+16     	; 0x316 <__vector_11+0x5a>
 306:	80 91 12 01 	lds	r24, 0x0112
 30a:	84 30       	cpi	r24, 0x04	; 4
 30c:	21 f0       	breq	.+8      	; 0x316 <__vector_11+0x5a>
 30e:	80 91 12 01 	lds	r24, 0x0112
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	39 f4       	brne	.+14     	; 0x324 <__vector_11+0x68>
		cancel = entprellen(TASTERCANCEL);
 316:	80 b1       	in	r24, 0x00	; 0
 318:	80 72       	andi	r24, 0x20	; 32
 31a:	0e 94 5d 00 	call	0xba	; 0xba <entprellen>
 31e:	80 93 0a 01 	sts	0x010A, r24
 322:	22 c0       	rjmp	.+68     	; 0x368 <__vector_11+0xac>
	} else if (aktiverMode == wartenAufSpieler) { //alle Tasten außer Enter
 324:	80 91 12 01 	lds	r24, 0x0112
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	f1 f4       	brne	.+60     	; 0x368 <__vector_11+0xac>
		links = entprellen(TASTERLINKS);
 32c:	80 b1       	in	r24, 0x00	; 0
 32e:	82 70       	andi	r24, 0x02	; 2
 330:	0e 94 5d 00 	call	0xba	; 0xba <entprellen>
 334:	80 93 0f 01 	sts	0x010F, r24
		rechts = entprellen(TASTERRECHTS);
 338:	80 b1       	in	r24, 0x00	; 0
 33a:	84 70       	andi	r24, 0x04	; 4
 33c:	0e 94 5d 00 	call	0xba	; 0xba <entprellen>
 340:	80 93 0e 01 	sts	0x010E, r24
		oben = entprellen(TASTEROBEN);
 344:	80 b1       	in	r24, 0x00	; 0
 346:	81 70       	andi	r24, 0x01	; 1
 348:	0e 94 5d 00 	call	0xba	; 0xba <entprellen>
 34c:	80 93 0d 01 	sts	0x010D, r24
		unten = entprellen(TASTERUNTEN);
 350:	80 b1       	in	r24, 0x00	; 0
 352:	88 70       	andi	r24, 0x08	; 8
 354:	0e 94 5d 00 	call	0xba	; 0xba <entprellen>
 358:	80 93 0c 01 	sts	0x010C, r24
		cancel = entprellen(TASTERCANCEL);
 35c:	80 b1       	in	r24, 0x00	; 0
 35e:	80 72       	andi	r24, 0x20	; 32
 360:	0e 94 5d 00 	call	0xba	; 0xba <entprellen>
 364:	80 93 0a 01 	sts	0x010A, r24
	} 
	
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <__vector_13>:

ISR (TIMER1_COMPA_vect) {
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
	PORTD = 0xFF;
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	8b b9       	out	0x0b, r24	; 11
}
 39a:	8f 91       	pop	r24
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <__vector_15>:

ISR(TIMER1_OVF_vect) {
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	8f 93       	push	r24
	PORTD = 0x0F;
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	8b b9       	out	0x0b, r24	; 11
}
 3b6:	8f 91       	pop	r24
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <main>:

int main(void)
{
	//Setting Out/Inputs
	DDRA = 0x20;//(0<<PORTA0) | (0<<PORTA1) | (0<<PORTA2) | (0<<PORTA3) | (0<<PORTA4) | (1<<PORTA6);// PortA 0-4 Eingänge für Tasten; 6 Ausgang für linke LED
 3c2:	80 e2       	ldi	r24, 0x20	; 32
 3c4:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xA0;//(1<<PORTB5) | (1<<PORTB7); 
 3c6:	80 ea       	ldi	r24, 0xA0	; 160
 3c8:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<PORTC6);
 3ca:	80 e4       	ldi	r24, 0x40	; 64
 3cc:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF; //Alles Ausgänge um die Anzahl der Folge anzuzeigen
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 3d2:	1b b8       	out	0x0b, r1	; 11
	//Tastaturtimer starten;läuft die ganze Zeit
	TCNT2 = 0x00; //Timer zurücksetzen
 3d4:	10 92 b2 00 	sts	0x00B2, r1
	TCCR2B = (1<<CS02);	//Prescaler auf 256;~8ms bis Interrupt;
 3d8:	84 e0       	ldi	r24, 0x04	; 4
 3da:	80 93 b1 00 	sts	0x00B1, r24
	TIMSK2 = (1<<TOIE2);  //Overflow Interrupt aktivieren
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 70 00 	sts	0x0070, r24
	sei();
 3e4:	78 94       	sei
	TCNT0 = 0x00; //Timer zurücksetzen
	TCCR0B = (1<<CS02) | (1<<CS00) ;	//Prescaler auf 1024;~32ms bis Interrupt;
	TIMSK0 = (1<<TOIE0);  //Overflow Interrupt aktivieren
	sei();
	*/
	aktiverMode = bereitschaft;
 3e6:	10 92 12 01 	sts	0x0112, r1
	folgenlaenge = 0;
 3ea:	10 92 06 01 	sts	0x0106, r1
	folgeCounter = 0;
 3ee:	10 92 08 01 	sts	0x0108, r1
	//initialize all variables
	zeigeBereitschaft();
    while(1)
    {
		
		listLED = realloc(listLED,sizeof(readyTurn)*folgenlaenge++);
 3f2:	80 91 13 01 	lds	r24, 0x0113
 3f6:	90 91 14 01 	lds	r25, 0x0114
 3fa:	60 91 06 01 	lds	r22, 0x0106
 3fe:	26 2f       	mov	r18, r22
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	20 93 06 01 	sts	0x0106, r18
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	0e 94 14 02 	call	0x428	; 0x428 <realloc>
 40c:	90 93 14 01 	sts	0x0114, r25
 410:	80 93 13 01 	sts	0x0113, r24
		listLED[folgenlaenge]= genRandzahl();  //Sorry, nicht grad das gelbe vom Ei, aber am schnellsten, da das Enum bei 0 beginnt und die Randzahl zwischen 0 und 3 (inkl.) liegt.
 414:	20 91 06 01 	lds	r18, 0x0106
 418:	82 0f       	add	r24, r18
 41a:	91 1d       	adc	r25, r1
	LEDOffOben();
	LEDOnUnten();
}

inline uint8_t genRandzahl() {
	return randZahl % 4;
 41c:	20 91 10 01 	lds	r18, 0x0110
 420:	23 70       	andi	r18, 0x03	; 3
	zeigeBereitschaft();
    while(1)
    {
		
		listLED = realloc(listLED,sizeof(readyTurn)*folgenlaenge++);
		listLED[folgenlaenge]= genRandzahl();  //Sorry, nicht grad das gelbe vom Ei, aber am schnellsten, da das Enum bei 0 beginnt und die Randzahl zwischen 0 und 3 (inkl.) liegt.
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
 426:	e5 cf       	rjmp	.-54     	; 0x3f2 <main+0x30>

00000428 <realloc>:
 428:	a2 e0       	ldi	r26, 0x02	; 2
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	ea e1       	ldi	r30, 0x1A	; 26
 42e:	f2 e0       	ldi	r31, 0x02	; 2
 430:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__prologue_saves__+0xc>
 434:	8c 01       	movw	r16, r24
 436:	00 97       	sbiw	r24, 0x00	; 0
 438:	29 f4       	brne	.+10     	; 0x444 <realloc+0x1c>
 43a:	cb 01       	movw	r24, r22
 43c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <malloc>
 440:	8c 01       	movw	r16, r24
 442:	b8 c0       	rjmp	.+368    	; 0x5b4 <realloc+0x18c>
 444:	dc 01       	movw	r26, r24
 446:	a6 0f       	add	r26, r22
 448:	b7 1f       	adc	r27, r23
 44a:	fc 01       	movw	r30, r24
 44c:	32 97       	sbiw	r30, 0x02	; 2
 44e:	ae 17       	cp	r26, r30
 450:	bf 07       	cpc	r27, r31
 452:	08 f4       	brcc	.+2      	; 0x456 <realloc+0x2e>
 454:	ad c0       	rjmp	.+346    	; 0x5b0 <realloc+0x188>
 456:	20 81       	ld	r18, Z
 458:	31 81       	ldd	r19, Z+1	; 0x01
 45a:	26 17       	cp	r18, r22
 45c:	37 07       	cpc	r19, r23
 45e:	b0 f0       	brcs	.+44     	; 0x48c <realloc+0x64>
 460:	25 30       	cpi	r18, 0x05	; 5
 462:	31 05       	cpc	r19, r1
 464:	08 f4       	brcc	.+2      	; 0x468 <realloc+0x40>
 466:	a6 c0       	rjmp	.+332    	; 0x5b4 <realloc+0x18c>
 468:	c9 01       	movw	r24, r18
 46a:	04 97       	sbiw	r24, 0x04	; 4
 46c:	86 17       	cp	r24, r22
 46e:	97 07       	cpc	r25, r23
 470:	08 f4       	brcc	.+2      	; 0x474 <realloc+0x4c>
 472:	a0 c0       	rjmp	.+320    	; 0x5b4 <realloc+0x18c>
 474:	22 50       	subi	r18, 0x02	; 2
 476:	30 40       	sbci	r19, 0x00	; 0
 478:	26 1b       	sub	r18, r22
 47a:	37 0b       	sbc	r19, r23
 47c:	2d 93       	st	X+, r18
 47e:	3d 93       	st	X+, r19
 480:	cd 01       	movw	r24, r26
 482:	71 83       	std	Z+1, r23	; 0x01
 484:	60 83       	st	Z, r22
 486:	0e 94 7e 03 	call	0x6fc	; 0x6fc <free>
 48a:	94 c0       	rjmp	.+296    	; 0x5b4 <realloc+0x18c>
 48c:	6b 01       	movw	r12, r22
 48e:	c2 1a       	sub	r12, r18
 490:	d3 0a       	sbc	r13, r19
 492:	5c 01       	movw	r10, r24
 494:	a2 0e       	add	r10, r18
 496:	b3 1e       	adc	r11, r19
 498:	e0 91 17 01 	lds	r30, 0x0117
 49c:	f0 91 18 01 	lds	r31, 0x0118
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	88 24       	eor	r8, r8
 4a6:	99 24       	eor	r9, r9
 4a8:	49 c0       	rjmp	.+146    	; 0x53c <realloc+0x114>
 4aa:	ea 15       	cp	r30, r10
 4ac:	fb 05       	cpc	r31, r11
 4ae:	e1 f5       	brne	.+120    	; 0x528 <realloc+0x100>
 4b0:	e0 80       	ld	r14, Z
 4b2:	f1 80       	ldd	r15, Z+1	; 0x01
 4b4:	c7 01       	movw	r24, r14
 4b6:	02 96       	adiw	r24, 0x02	; 2
 4b8:	8c 15       	cp	r24, r12
 4ba:	9d 05       	cpc	r25, r13
 4bc:	a8 f1       	brcs	.+106    	; 0x528 <realloc+0x100>
 4be:	a7 01       	movw	r20, r14
 4c0:	4c 19       	sub	r20, r12
 4c2:	5d 09       	sbc	r21, r13
 4c4:	ca 01       	movw	r24, r20
 4c6:	02 96       	adiw	r24, 0x02	; 2
 4c8:	0f 2e       	mov	r0, r31
 4ca:	fe ef       	ldi	r31, 0xFE	; 254
 4cc:	cf 2e       	mov	r12, r31
 4ce:	ff ef       	ldi	r31, 0xFF	; 255
 4d0:	df 2e       	mov	r13, r31
 4d2:	f0 2d       	mov	r31, r0
 4d4:	c0 0e       	add	r12, r16
 4d6:	d1 1e       	adc	r13, r17
 4d8:	85 30       	cpi	r24, 0x05	; 5
 4da:	91 05       	cpc	r25, r1
 4dc:	78 f0       	brcs	.+30     	; 0x4fc <realloc+0xd4>
 4de:	82 81       	ldd	r24, Z+2	; 0x02
 4e0:	93 81       	ldd	r25, Z+3	; 0x03
 4e2:	13 96       	adiw	r26, 0x03	; 3
 4e4:	9c 93       	st	X, r25
 4e6:	8e 93       	st	-X, r24
 4e8:	12 97       	sbiw	r26, 0x02	; 2
 4ea:	11 96       	adiw	r26, 0x01	; 1
 4ec:	5c 93       	st	X, r21
 4ee:	4e 93       	st	-X, r20
 4f0:	f6 01       	movw	r30, r12
 4f2:	71 83       	std	Z+1, r23	; 0x01
 4f4:	60 83       	st	Z, r22
 4f6:	9a 2f       	mov	r25, r26
 4f8:	8b 2f       	mov	r24, r27
 4fa:	0a c0       	rjmp	.+20     	; 0x510 <realloc+0xe8>
 4fc:	c9 01       	movw	r24, r18
 4fe:	02 96       	adiw	r24, 0x02	; 2
 500:	8e 0d       	add	r24, r14
 502:	9f 1d       	adc	r25, r15
 504:	d6 01       	movw	r26, r12
 506:	11 96       	adiw	r26, 0x01	; 1
 508:	9c 93       	st	X, r25
 50a:	8e 93       	st	-X, r24
 50c:	92 81       	ldd	r25, Z+2	; 0x02
 50e:	83 81       	ldd	r24, Z+3	; 0x03
 510:	81 14       	cp	r8, r1
 512:	91 04       	cpc	r9, r1
 514:	21 f0       	breq	.+8      	; 0x51e <realloc+0xf6>
 516:	f4 01       	movw	r30, r8
 518:	92 83       	std	Z+2, r25	; 0x02
 51a:	83 83       	std	Z+3, r24	; 0x03
 51c:	4b c0       	rjmp	.+150    	; 0x5b4 <realloc+0x18c>
 51e:	90 93 17 01 	sts	0x0117, r25
 522:	80 93 18 01 	sts	0x0118, r24
 526:	46 c0       	rjmp	.+140    	; 0x5b4 <realloc+0x18c>
 528:	80 81       	ld	r24, Z
 52a:	91 81       	ldd	r25, Z+1	; 0x01
 52c:	48 17       	cp	r20, r24
 52e:	59 07       	cpc	r21, r25
 530:	08 f4       	brcc	.+2      	; 0x534 <realloc+0x10c>
 532:	ac 01       	movw	r20, r24
 534:	82 81       	ldd	r24, Z+2	; 0x02
 536:	93 81       	ldd	r25, Z+3	; 0x03
 538:	4f 01       	movw	r8, r30
 53a:	fc 01       	movw	r30, r24
 53c:	30 97       	sbiw	r30, 0x00	; 0
 53e:	09 f0       	breq	.+2      	; 0x542 <realloc+0x11a>
 540:	b4 cf       	rjmp	.-152    	; 0x4aa <realloc+0x82>
 542:	80 91 15 01 	lds	r24, 0x0115
 546:	90 91 16 01 	lds	r25, 0x0116
 54a:	8a 15       	cp	r24, r10
 54c:	9b 05       	cpc	r25, r11
 54e:	e9 f4       	brne	.+58     	; 0x58a <realloc+0x162>
 550:	46 17       	cp	r20, r22
 552:	57 07       	cpc	r21, r23
 554:	d0 f4       	brcc	.+52     	; 0x58a <realloc+0x162>
 556:	80 91 00 01 	lds	r24, 0x0100
 55a:	90 91 01 01 	lds	r25, 0x0101
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	41 f4       	brne	.+16     	; 0x572 <realloc+0x14a>
 562:	8d b7       	in	r24, 0x3d	; 61
 564:	9e b7       	in	r25, 0x3e	; 62
 566:	20 91 04 01 	lds	r18, 0x0104
 56a:	30 91 05 01 	lds	r19, 0x0105
 56e:	82 1b       	sub	r24, r18
 570:	93 0b       	sbc	r25, r19
 572:	a8 17       	cp	r26, r24
 574:	b9 07       	cpc	r27, r25
 576:	e0 f4       	brcc	.+56     	; 0x5b0 <realloc+0x188>
 578:	b0 93 16 01 	sts	0x0116, r27
 57c:	a0 93 15 01 	sts	0x0115, r26
 580:	f8 01       	movw	r30, r16
 582:	32 97       	sbiw	r30, 0x02	; 2
 584:	71 83       	std	Z+1, r23	; 0x01
 586:	60 83       	st	Z, r22
 588:	15 c0       	rjmp	.+42     	; 0x5b4 <realloc+0x18c>
 58a:	cb 01       	movw	r24, r22
 58c:	29 83       	std	Y+1, r18	; 0x01
 58e:	3a 83       	std	Y+2, r19	; 0x02
 590:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <malloc>
 594:	7c 01       	movw	r14, r24
 596:	29 81       	ldd	r18, Y+1	; 0x01
 598:	3a 81       	ldd	r19, Y+2	; 0x02
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	49 f0       	breq	.+18     	; 0x5b0 <realloc+0x188>
 59e:	b8 01       	movw	r22, r16
 5a0:	a9 01       	movw	r20, r18
 5a2:	0e 94 df 02 	call	0x5be	; 0x5be <memcpy>
 5a6:	c8 01       	movw	r24, r16
 5a8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <free>
 5ac:	87 01       	movw	r16, r14
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <realloc+0x18c>
 5b0:	00 e0       	ldi	r16, 0x00	; 0
 5b2:	10 e0       	ldi	r17, 0x00	; 0
 5b4:	c8 01       	movw	r24, r16
 5b6:	22 96       	adiw	r28, 0x02	; 2
 5b8:	ec e0       	ldi	r30, 0x0C	; 12
 5ba:	0c 94 39 04 	jmp	0x872	; 0x872 <__epilogue_restores__+0xc>

000005be <memcpy>:
 5be:	fb 01       	movw	r30, r22
 5c0:	dc 01       	movw	r26, r24
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <memcpy+0xa>
 5c4:	01 90       	ld	r0, Z+
 5c6:	0d 92       	st	X+, r0
 5c8:	41 50       	subi	r20, 0x01	; 1
 5ca:	50 40       	sbci	r21, 0x00	; 0
 5cc:	d8 f7       	brcc	.-10     	; 0x5c4 <memcpy+0x6>
 5ce:	08 95       	ret

000005d0 <malloc>:
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	ac 01       	movw	r20, r24
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	91 05       	cpc	r25, r1
 5da:	10 f4       	brcc	.+4      	; 0x5e0 <malloc+0x10>
 5dc:	42 e0       	ldi	r20, 0x02	; 2
 5de:	50 e0       	ldi	r21, 0x00	; 0
 5e0:	e0 91 17 01 	lds	r30, 0x0117
 5e4:	f0 91 18 01 	lds	r31, 0x0118
 5e8:	20 e0       	ldi	r18, 0x00	; 0
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	a0 e0       	ldi	r26, 0x00	; 0
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	24 c0       	rjmp	.+72     	; 0x63a <malloc+0x6a>
 5f2:	80 81       	ld	r24, Z
 5f4:	91 81       	ldd	r25, Z+1	; 0x01
 5f6:	84 17       	cp	r24, r20
 5f8:	95 07       	cpc	r25, r21
 5fa:	d0 f0       	brcs	.+52     	; 0x630 <malloc+0x60>
 5fc:	84 17       	cp	r24, r20
 5fe:	95 07       	cpc	r25, r21
 600:	71 f4       	brne	.+28     	; 0x61e <malloc+0x4e>
 602:	82 81       	ldd	r24, Z+2	; 0x02
 604:	93 81       	ldd	r25, Z+3	; 0x03
 606:	10 97       	sbiw	r26, 0x00	; 0
 608:	29 f0       	breq	.+10     	; 0x614 <malloc+0x44>
 60a:	13 96       	adiw	r26, 0x03	; 3
 60c:	9c 93       	st	X, r25
 60e:	8e 93       	st	-X, r24
 610:	12 97       	sbiw	r26, 0x02	; 2
 612:	2c c0       	rjmp	.+88     	; 0x66c <malloc+0x9c>
 614:	90 93 18 01 	sts	0x0118, r25
 618:	80 93 17 01 	sts	0x0117, r24
 61c:	27 c0       	rjmp	.+78     	; 0x66c <malloc+0x9c>
 61e:	21 15       	cp	r18, r1
 620:	31 05       	cpc	r19, r1
 622:	19 f0       	breq	.+6      	; 0x62a <malloc+0x5a>
 624:	82 17       	cp	r24, r18
 626:	93 07       	cpc	r25, r19
 628:	18 f4       	brcc	.+6      	; 0x630 <malloc+0x60>
 62a:	9c 01       	movw	r18, r24
 62c:	bd 01       	movw	r22, r26
 62e:	ef 01       	movw	r28, r30
 630:	92 81       	ldd	r25, Z+2	; 0x02
 632:	83 81       	ldd	r24, Z+3	; 0x03
 634:	df 01       	movw	r26, r30
 636:	e9 2f       	mov	r30, r25
 638:	f8 2f       	mov	r31, r24
 63a:	30 97       	sbiw	r30, 0x00	; 0
 63c:	d1 f6       	brne	.-76     	; 0x5f2 <malloc+0x22>
 63e:	21 15       	cp	r18, r1
 640:	31 05       	cpc	r19, r1
 642:	f9 f0       	breq	.+62     	; 0x682 <malloc+0xb2>
 644:	c9 01       	movw	r24, r18
 646:	84 1b       	sub	r24, r20
 648:	95 0b       	sbc	r25, r21
 64a:	84 30       	cpi	r24, 0x04	; 4
 64c:	91 05       	cpc	r25, r1
 64e:	80 f4       	brcc	.+32     	; 0x670 <malloc+0xa0>
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	9b 81       	ldd	r25, Y+3	; 0x03
 654:	61 15       	cp	r22, r1
 656:	71 05       	cpc	r23, r1
 658:	21 f0       	breq	.+8      	; 0x662 <malloc+0x92>
 65a:	fb 01       	movw	r30, r22
 65c:	93 83       	std	Z+3, r25	; 0x03
 65e:	82 83       	std	Z+2, r24	; 0x02
 660:	04 c0       	rjmp	.+8      	; 0x66a <malloc+0x9a>
 662:	90 93 18 01 	sts	0x0118, r25
 666:	80 93 17 01 	sts	0x0117, r24
 66a:	fe 01       	movw	r30, r28
 66c:	32 96       	adiw	r30, 0x02	; 2
 66e:	42 c0       	rjmp	.+132    	; 0x6f4 <malloc+0x124>
 670:	fe 01       	movw	r30, r28
 672:	e8 0f       	add	r30, r24
 674:	f9 1f       	adc	r31, r25
 676:	41 93       	st	Z+, r20
 678:	51 93       	st	Z+, r21
 67a:	02 97       	sbiw	r24, 0x02	; 2
 67c:	99 83       	std	Y+1, r25	; 0x01
 67e:	88 83       	st	Y, r24
 680:	39 c0       	rjmp	.+114    	; 0x6f4 <malloc+0x124>
 682:	80 91 15 01 	lds	r24, 0x0115
 686:	90 91 16 01 	lds	r25, 0x0116
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	41 f4       	brne	.+16     	; 0x69e <malloc+0xce>
 68e:	80 91 02 01 	lds	r24, 0x0102
 692:	90 91 03 01 	lds	r25, 0x0103
 696:	90 93 16 01 	sts	0x0116, r25
 69a:	80 93 15 01 	sts	0x0115, r24
 69e:	20 91 00 01 	lds	r18, 0x0100
 6a2:	30 91 01 01 	lds	r19, 0x0101
 6a6:	21 15       	cp	r18, r1
 6a8:	31 05       	cpc	r19, r1
 6aa:	41 f4       	brne	.+16     	; 0x6bc <malloc+0xec>
 6ac:	2d b7       	in	r18, 0x3d	; 61
 6ae:	3e b7       	in	r19, 0x3e	; 62
 6b0:	80 91 04 01 	lds	r24, 0x0104
 6b4:	90 91 05 01 	lds	r25, 0x0105
 6b8:	28 1b       	sub	r18, r24
 6ba:	39 0b       	sbc	r19, r25
 6bc:	e0 91 15 01 	lds	r30, 0x0115
 6c0:	f0 91 16 01 	lds	r31, 0x0116
 6c4:	e2 17       	cp	r30, r18
 6c6:	f3 07       	cpc	r31, r19
 6c8:	98 f4       	brcc	.+38     	; 0x6f0 <malloc+0x120>
 6ca:	2e 1b       	sub	r18, r30
 6cc:	3f 0b       	sbc	r19, r31
 6ce:	24 17       	cp	r18, r20
 6d0:	35 07       	cpc	r19, r21
 6d2:	70 f0       	brcs	.+28     	; 0x6f0 <malloc+0x120>
 6d4:	ca 01       	movw	r24, r20
 6d6:	02 96       	adiw	r24, 0x02	; 2
 6d8:	28 17       	cp	r18, r24
 6da:	39 07       	cpc	r19, r25
 6dc:	48 f0       	brcs	.+18     	; 0x6f0 <malloc+0x120>
 6de:	8e 0f       	add	r24, r30
 6e0:	9f 1f       	adc	r25, r31
 6e2:	90 93 16 01 	sts	0x0116, r25
 6e6:	80 93 15 01 	sts	0x0115, r24
 6ea:	41 93       	st	Z+, r20
 6ec:	51 93       	st	Z+, r21
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <malloc+0x124>
 6f0:	e0 e0       	ldi	r30, 0x00	; 0
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	cf 01       	movw	r24, r30
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	08 95       	ret

000006fc <free>:
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	9c 01       	movw	r18, r24
 706:	00 97       	sbiw	r24, 0x00	; 0
 708:	09 f4       	brne	.+2      	; 0x70c <free+0x10>
 70a:	8c c0       	rjmp	.+280    	; 0x824 <free+0x128>
 70c:	dc 01       	movw	r26, r24
 70e:	12 97       	sbiw	r26, 0x02	; 2
 710:	13 96       	adiw	r26, 0x03	; 3
 712:	1c 92       	st	X, r1
 714:	1e 92       	st	-X, r1
 716:	12 97       	sbiw	r26, 0x02	; 2
 718:	60 91 17 01 	lds	r22, 0x0117
 71c:	70 91 18 01 	lds	r23, 0x0118
 720:	61 15       	cp	r22, r1
 722:	71 05       	cpc	r23, r1
 724:	89 f4       	brne	.+34     	; 0x748 <free+0x4c>
 726:	8d 91       	ld	r24, X+
 728:	9c 91       	ld	r25, X
 72a:	11 97       	sbiw	r26, 0x01	; 1
 72c:	82 0f       	add	r24, r18
 72e:	93 1f       	adc	r25, r19
 730:	20 91 15 01 	lds	r18, 0x0115
 734:	30 91 16 01 	lds	r19, 0x0116
 738:	28 17       	cp	r18, r24
 73a:	39 07       	cpc	r19, r25
 73c:	69 f5       	brne	.+90     	; 0x798 <free+0x9c>
 73e:	b0 93 16 01 	sts	0x0116, r27
 742:	a0 93 15 01 	sts	0x0115, r26
 746:	6e c0       	rjmp	.+220    	; 0x824 <free+0x128>
 748:	fb 01       	movw	r30, r22
 74a:	40 e0       	ldi	r20, 0x00	; 0
 74c:	50 e0       	ldi	r21, 0x00	; 0
 74e:	01 c0       	rjmp	.+2      	; 0x752 <free+0x56>
 750:	fc 01       	movw	r30, r24
 752:	ea 17       	cp	r30, r26
 754:	fb 07       	cpc	r31, r27
 756:	30 f4       	brcc	.+12     	; 0x764 <free+0x68>
 758:	82 81       	ldd	r24, Z+2	; 0x02
 75a:	93 81       	ldd	r25, Z+3	; 0x03
 75c:	af 01       	movw	r20, r30
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	b9 f7       	brne	.-18     	; 0x750 <free+0x54>
 762:	1f c0       	rjmp	.+62     	; 0x7a2 <free+0xa6>
 764:	e9 01       	movw	r28, r18
 766:	22 97       	sbiw	r28, 0x02	; 2
 768:	fb 83       	std	Y+3, r31	; 0x03
 76a:	ea 83       	std	Y+2, r30	; 0x02
 76c:	08 81       	ld	r16, Y
 76e:	19 81       	ldd	r17, Y+1	; 0x01
 770:	c9 01       	movw	r24, r18
 772:	80 0f       	add	r24, r16
 774:	91 1f       	adc	r25, r17
 776:	8e 17       	cp	r24, r30
 778:	9f 07       	cpc	r25, r31
 77a:	59 f4       	brne	.+22     	; 0x792 <free+0x96>
 77c:	80 81       	ld	r24, Z
 77e:	91 81       	ldd	r25, Z+1	; 0x01
 780:	80 0f       	add	r24, r16
 782:	91 1f       	adc	r25, r17
 784:	02 96       	adiw	r24, 0x02	; 2
 786:	99 83       	std	Y+1, r25	; 0x01
 788:	88 83       	st	Y, r24
 78a:	82 81       	ldd	r24, Z+2	; 0x02
 78c:	93 81       	ldd	r25, Z+3	; 0x03
 78e:	9b 83       	std	Y+3, r25	; 0x03
 790:	8a 83       	std	Y+2, r24	; 0x02
 792:	41 15       	cp	r20, r1
 794:	51 05       	cpc	r21, r1
 796:	29 f4       	brne	.+10     	; 0x7a2 <free+0xa6>
 798:	b0 93 18 01 	sts	0x0118, r27
 79c:	a0 93 17 01 	sts	0x0117, r26
 7a0:	41 c0       	rjmp	.+130    	; 0x824 <free+0x128>
 7a2:	fa 01       	movw	r30, r20
 7a4:	b3 83       	std	Z+3, r27	; 0x03
 7a6:	a2 83       	std	Z+2, r26	; 0x02
 7a8:	c1 91       	ld	r28, Z+
 7aa:	d1 91       	ld	r29, Z+
 7ac:	ec 0f       	add	r30, r28
 7ae:	fd 1f       	adc	r31, r29
 7b0:	ae 17       	cp	r26, r30
 7b2:	bf 07       	cpc	r27, r31
 7b4:	81 f4       	brne	.+32     	; 0x7d6 <free+0xda>
 7b6:	f9 01       	movw	r30, r18
 7b8:	92 91       	ld	r25, -Z
 7ba:	82 91       	ld	r24, -Z
 7bc:	8c 0f       	add	r24, r28
 7be:	9d 1f       	adc	r25, r29
 7c0:	02 96       	adiw	r24, 0x02	; 2
 7c2:	da 01       	movw	r26, r20
 7c4:	11 96       	adiw	r26, 0x01	; 1
 7c6:	9c 93       	st	X, r25
 7c8:	8e 93       	st	-X, r24
 7ca:	82 81       	ldd	r24, Z+2	; 0x02
 7cc:	93 81       	ldd	r25, Z+3	; 0x03
 7ce:	13 96       	adiw	r26, 0x03	; 3
 7d0:	9c 93       	st	X, r25
 7d2:	8e 93       	st	-X, r24
 7d4:	12 97       	sbiw	r26, 0x02	; 2
 7d6:	e0 e0       	ldi	r30, 0x00	; 0
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <free+0xe4>
 7dc:	fb 01       	movw	r30, r22
 7de:	bc 01       	movw	r22, r24
 7e0:	db 01       	movw	r26, r22
 7e2:	12 96       	adiw	r26, 0x02	; 2
 7e4:	8d 91       	ld	r24, X+
 7e6:	9c 91       	ld	r25, X
 7e8:	13 97       	sbiw	r26, 0x03	; 3
 7ea:	00 97       	sbiw	r24, 0x00	; 0
 7ec:	b9 f7       	brne	.-18     	; 0x7dc <free+0xe0>
 7ee:	cb 01       	movw	r24, r22
 7f0:	02 96       	adiw	r24, 0x02	; 2
 7f2:	2d 91       	ld	r18, X+
 7f4:	3c 91       	ld	r19, X
 7f6:	11 97       	sbiw	r26, 0x01	; 1
 7f8:	82 0f       	add	r24, r18
 7fa:	93 1f       	adc	r25, r19
 7fc:	20 91 15 01 	lds	r18, 0x0115
 800:	30 91 16 01 	lds	r19, 0x0116
 804:	28 17       	cp	r18, r24
 806:	39 07       	cpc	r19, r25
 808:	69 f4       	brne	.+26     	; 0x824 <free+0x128>
 80a:	30 97       	sbiw	r30, 0x00	; 0
 80c:	29 f4       	brne	.+10     	; 0x818 <free+0x11c>
 80e:	10 92 18 01 	sts	0x0118, r1
 812:	10 92 17 01 	sts	0x0117, r1
 816:	02 c0       	rjmp	.+4      	; 0x81c <free+0x120>
 818:	13 82       	std	Z+3, r1	; 0x03
 81a:	12 82       	std	Z+2, r1	; 0x02
 81c:	70 93 16 01 	sts	0x0116, r23
 820:	60 93 15 01 	sts	0x0115, r22
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	0f 91       	pop	r16
 82c:	08 95       	ret

0000082e <__prologue_saves__>:
 82e:	2f 92       	push	r2
 830:	3f 92       	push	r3
 832:	4f 92       	push	r4
 834:	5f 92       	push	r5
 836:	6f 92       	push	r6
 838:	7f 92       	push	r7
 83a:	8f 92       	push	r8
 83c:	9f 92       	push	r9
 83e:	af 92       	push	r10
 840:	bf 92       	push	r11
 842:	cf 92       	push	r12
 844:	df 92       	push	r13
 846:	ef 92       	push	r14
 848:	ff 92       	push	r15
 84a:	0f 93       	push	r16
 84c:	1f 93       	push	r17
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	ca 1b       	sub	r28, r26
 858:	db 0b       	sbc	r29, r27
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	f8 94       	cli
 85e:	de bf       	out	0x3e, r29	; 62
 860:	0f be       	out	0x3f, r0	; 63
 862:	cd bf       	out	0x3d, r28	; 61
 864:	09 94       	ijmp

00000866 <__epilogue_restores__>:
 866:	2a 88       	ldd	r2, Y+18	; 0x12
 868:	39 88       	ldd	r3, Y+17	; 0x11
 86a:	48 88       	ldd	r4, Y+16	; 0x10
 86c:	5f 84       	ldd	r5, Y+15	; 0x0f
 86e:	6e 84       	ldd	r6, Y+14	; 0x0e
 870:	7d 84       	ldd	r7, Y+13	; 0x0d
 872:	8c 84       	ldd	r8, Y+12	; 0x0c
 874:	9b 84       	ldd	r9, Y+11	; 0x0b
 876:	aa 84       	ldd	r10, Y+10	; 0x0a
 878:	b9 84       	ldd	r11, Y+9	; 0x09
 87a:	c8 84       	ldd	r12, Y+8	; 0x08
 87c:	df 80       	ldd	r13, Y+7	; 0x07
 87e:	ee 80       	ldd	r14, Y+6	; 0x06
 880:	fd 80       	ldd	r15, Y+5	; 0x05
 882:	0c 81       	ldd	r16, Y+4	; 0x04
 884:	1b 81       	ldd	r17, Y+3	; 0x03
 886:	aa 81       	ldd	r26, Y+2	; 0x02
 888:	b9 81       	ldd	r27, Y+1	; 0x01
 88a:	ce 0f       	add	r28, r30
 88c:	d1 1d       	adc	r29, r1
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	f8 94       	cli
 892:	de bf       	out	0x3e, r29	; 62
 894:	0f be       	out	0x3f, r0	; 63
 896:	cd bf       	out	0x3d, r28	; 61
 898:	ed 01       	movw	r28, r26
 89a:	08 95       	ret

0000089c <_exit>:
 89c:	f8 94       	cli

0000089e <__stop_program>:
 89e:	ff cf       	rjmp	.-2      	; 0x89e <__stop_program>
